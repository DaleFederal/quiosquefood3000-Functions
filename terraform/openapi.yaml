swagger: "2.0"
info:
  title: "QuiosqueFood Customer API"
  description: "API para gerenciamento de clientes do QuiosqueFood"
  version: "1.0.0"
schemes:
  - "https"
produces:
  - "application/json"
consumes:
  - "application/json"

securityDefinitions:
  firebase_auth:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "https://securetoken.google.com/${project_id}"
    x-google-jwks_uri: "https://www.googleapis.com/service_accounts/v1/metadata/x509/securetoken@system.gserviceaccount.com"
    x-google-audiences: "${project_id}"

paths:
  /customers:
    post:
      summary: "Criar novo cliente"
      operationId: "createCustomer"
      security:
        - firebase_auth: []
      parameters:
        - name: "customer"
          in: "body"
          required: true
          schema:
            type: "object"
            required:
              - "name"
              - "email"
              - "cpf"
            properties:
              name:
                type: "string"
                description: "Nome do cliente"
              email:
                type: "string"
                description: "Email do cliente"
              cpf:
                type: "string"
                description: "CPF do cliente"
      responses:
        201:
          description: "Cliente criado com sucesso"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
              messageId:
                type: "string"
        400:
          description: "Dados inválidos"
        409:
          description: "CPF já cadastrado"
        500:
          description: "Erro interno do servidor"
      x-google-backend:
        address: "${create_customer_url}"

    get:
      summary: "Buscar cliente por CPF"
      operationId: "getCustomer"
      security:
        - firebase_auth: []
      parameters:
        - name: "cpf"
          in: "query"
          required: true
          type: "string"
          description: "CPF do cliente"
      responses:
        200:
          description: "Cliente encontrado"
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                id:
                  type: "integer"
                name:
                  type: "string"
                email:
                  type: "string"
                cpf:
                  type: "string"
        404:
          description: "Cliente não encontrado"
        400:
          description: "CPF é obrigatório"
        500:
          description: "Erro interno do servidor"
      x-google-backend:
        address: "${get_customer_url}"

    put:
      summary: "Atualizar cliente por CPF"
      operationId: "updateCustomer"
      security:
        - firebase_auth: []
      parameters:
        - name: "cpf"
          in: "query"
          required: true
          type: "string"
          description: "CPF do cliente"
        - name: "customer"
          in: "body"
          required: true
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                description: "Nome do cliente"
              email:
                type: "string"
                description: "Email do cliente"
      responses:
        200:
          description: "Cliente atualizado com sucesso"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        400:
          description: "CPF é obrigatório"
        500:
          description: "Erro interno do servidor"
      x-google-backend:
        address: "${update_customer_url}"

    delete:
      summary: "Excluir cliente por CPF"
      operationId: "deleteCustomer"
      security:
        - firebase_auth: []
      parameters:
        - name: "cpf"
          in: "query"
          required: true
          type: "string"
          description: "CPF do cliente"
      responses:
        200:
          description: "Cliente excluído com sucesso"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        400:
          description: "CPF é obrigatório"
        500:
          description: "Erro interno do servidor"
      x-google-backend:
        address: "${delete_customer_url}"

  /health:
    get:
      summary: "Health check"
      operationId: "healthCheck"
      responses:
        200:
          description: "API funcionando"
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                example: "healthy"
              timestamp:
                type: "string"
                format: "date-time"
      x-google-backend:
        address: "https://httpbin.org/get"