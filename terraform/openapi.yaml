swagger: "2.0"
info:
  title: "QuiosqueFood Customer API"
  description: "API para gerenciamento de clientes do QuiosqueFood"
  version: "1.0.0"
schemes:
  - "https"
produces:
  - "application/json"
consumes:
  - "application/json"

firebase_auth:
  type: "oauth2"
  x-google-issuer: "https://securetoken.google.com/quiosquefood3000"
  x-google-jwks_uri: "https://www.googleapis.com/service_accounts/v1/metadata/x509/securetoken@system.gserviceaccount.com"
  x-google-audiences: "quiosquefood3000"

paths:
  /customers:
    post:
      summary: "Criar novo cliente"
      operationId: "createCustomer"
      security:
        - firebase_auth: []
      parameters:
        - name: "customer"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Customer"
      responses:
        201:
          description: "Cliente criado com sucesso"
          schema:
            $ref: "#/definitions/ResponseMessage"
        400:
          description: "Dados inválidos"
        409:
          description: "CPF já cadastrado"
        500:
          description: "Erro interno do servidor"
      x-google-backend:
        address: "https://us-central1-quiosquefood3000.cloudfunctions.net/create-customer"
        protocol: "h2"

    get:
      summary: "Buscar cliente por CPF"
      operationId: "getCustomer"
      security:
        - api_key: []
        - firebase_auth: []
      parameters:
        - name: "cpf"
          in: "query"
          required: true
          type: "string"
          description: "CPF do cliente"
      responses:
        200:
          description: "Cliente encontrado"
          schema:
            $ref: "#/definitions/Customer"
        404:
          description: "Cliente não encontrado"
        400:
          description: "CPF é obrigatório"
        500:
          description: "Erro interno do servidor"
      x-google-backend:
        address: "https://us-central1-quiosquefood3000.cloudfunctions.net/get-customer"
        protocol: "h2"

    put:
      summary: "Atualizar cliente por CPF"
      operationId: "updateCustomer"
      security:
        - api_key: []
        - firebase_auth: []
      parameters:
        - name: "cpf"
          in: "query"
          required: true
          type: "string"
          description: "CPF do cliente"
        - name: "customer"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/CustomerUpdate"
      responses:
        200:
          description: "Cliente atualizado com sucesso"
          schema:
            $ref: "#/definitions/ResponseMessage"
        400:
          description: "CPF é obrigatório"
        500:
          description: "Erro interno do servidor"
      x-google-backend:
        address: "https://us-central1-quiosquefood3000.cloudfunctions.net/update-customer"
        protocol: "h2"

    delete:
      summary: "Excluir cliente por CPF"
      operationId: "deleteCustomer"
      security:
        - api_key: []
        - firebase_auth: []
      parameters:
        - name: "cpf"
          in: "query"
          required: true
          type: "string"
          description: "CPF do cliente"
      responses:
        200:
          description: "Cliente excluído com sucesso"
          schema:
            $ref: "#/definitions/ResponseMessage"
        400:
          description: "CPF é obrigatório"
        500:
          description: "Erro interno do servidor"
      x-google-backend:
        address: "https://us-central1-quiosquefood3000.cloudfunctions.net/delete-customer"
        protocol: "h2"

  /health:
    get:
      summary: "Health check"
      operationId: "healthCheck"
      security:
        - api_key: []
      responses:
        200:
          description: "API funcionando"
          schema:
            $ref: "#/definitions/HealthCheck"
      x-google-backend:
        address: "https://httpbin.org/get"
        protocol: "h2"

definitions:
  Customer:
    type: "object"
    required:
      - "name"
      - "email"
      - "cpf"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      cpf:
        type: "string"

  CustomerUpdate:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"

  ResponseMessage:
    type: "object"
    properties:
      message:
        type: "string"
      messageId:
        type: "string"

  HealthCheck:
    type: "object"
    properties:
      status:
        type: "string"
        example: "healthy"
      timestamp:
        type: "string"
        format: "date-time"