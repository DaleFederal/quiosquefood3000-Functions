name: Deploy QuiosqueFood API

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT || 'quiosquefood3000' }}
      REGION: 'us-central1'
      DATASET_ID: 'QuiosqueFood'
      TABLE_ID: 'customers'
      BUCKET_NAME: 'function-bucket-quiosquefood'
      API_ID: 'customers-api'
      GATEWAY_ID: 'customers-gateway'

    steps:
      # Configuração inicial
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Build das funções
      - name: Install dependencies
        run: |
          cd functions
          npm ci

      - name: Generate unique build ID
        id: build-id
        run: |
          BUILD_ID="$(date +%Y%m%d-%H%M%S)-$(git rev-parse --short HEAD)"
          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_OUTPUT
          echo "ZIP_NAME=function-source-${BUILD_ID}.zip" >> $GITHUB_OUTPUT
          echo "API_CONFIG_ID=config-${BUILD_ID}" >> $GITHUB_OUTPUT

      - name: Create deployment package
        run: |
          cd functions
          zip -r ../${{ steps.build-id.outputs.ZIP_NAME }} . \
            -x "node_modules/*" "*.git*" "*.DS_Store*" "test/*"

      # Autenticação no GCP
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      # Gerenciamento do Storage
      - name: Upload function package
        run: |
          gsutil cp ${{ steps.build-id.outputs.ZIP_NAME }} gs://${{ env.BUCKET_NAME }}/

      # Configuração do Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform -chdir=terraform init

      # Importação segura de recursos existentes
      - name: Import existing infrastructure
        run: |
          cd terraform
          set +e
          terraform import google_storage_bucket.function_bucket ${{ env.BUCKET_NAME }}
          terraform import google_bigquery_dataset.dataset ${{ env.DATASET_ID }}
          terraform import google_bigquery_table.customers projects/${{ env.PROJECT_ID }}/datasets/${{ env.DATASET_ID }}/tables/${{ env.TABLE_ID }}
          terraform import google_pubsub_topic.customer_topic projects/${{ env.PROJECT_ID }}/topics/customer
          terraform import google_api_gateway_api.api projects/${{ env.PROJECT_ID }}/locations/global/apis/${{ env.API_ID }}
          terraform import google_service_account.gateway_invoker projects/${{ env.PROJECT_ID }}/serviceAccounts/gateway-invoker@${{ env.PROJECT_ID }}.iam.gserviceaccount.com
          set -e

      # Limpeza de configurações antigas
      - name: Clean previous API Configs
        run: |
          CURRENT_CONFIG=${{ steps.build-id.outputs.API_CONFIG_ID }}
          gcloud api-gateway api-configs list --api=${{ env.API_ID }} --format="value(CONFIG_ID)" \
          | grep -v "^${CURRENT_CONFIG}$" \
          | xargs -I {} gcloud api-gateway api-configs delete {} --api=${{ env.API_ID }} --quiet || true

      # Aplicação do Terraform
      - name: Terraform Apply
        run: |
          cd terraform
          cat > terraform.auto.tfvars << EOF
          project_id = "${{ env.PROJECT_ID }}"
          region = "${{ env.REGION }}"
          bucket_name = "${{ env.BUCKET_NAME }}"
          zip_object = "${{ steps.build-id.outputs.ZIP_NAME }}"
          api_config_id = "${{ steps.build-id.outputs.API_CONFIG_ID }}"
          EOF
          
          terraform apply -auto-approve

      # Verificação final
      - name: Verify deployment
        run: |
          echo "=== Cloud Functions ==="
          gcloud functions list --format="table(name,status,trigger)"
          
          echo "\n=== API Gateway ==="
          GATEWAY_URL=$(gcloud api-gateway gateways describe ${{ env.GATEWAY_ID }} \
            --location=${{ env.REGION }} \
            --format="value(defaultHostname)")
          echo "Gateway URL: https://${GATEWAY_URL}"
          
          echo "\n=== Test Health Check ==="
          curl -s "https://${GATEWAY_URL}/health" | jq
